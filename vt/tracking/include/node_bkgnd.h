#ifndef _NODE_BKGND_H_
#define _NODE_BKGND_H_

#include <iostream>

// Bgs Library
#include "package_bgs/dp/DPWrenGABGS.h"
#include "package_bgs/dp/DPTextureBGS.h"
#include "package_bgs/jmo/MultiLayerBGS.h"
#include "package_bgs/db/IndependentMultimodalBGS.h"
#include "package_bgs/pl/SuBSENSE.h"
#include "package_bgs/pl/LOBSTER.h"
// Bgs Library
#include "PBAS.h"
#include "BackgroundSubtractorSuBSENSE.h"
#include <vector>
#include <string>
#include <stdlib.h>
#include <stdio.h>

#include "graphnet.h"

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/video/background_segm.hpp>


//this module performs background subtraction
class GraphNodeBkgnd : public CLGraphNode
{
public:
	GraphNodeBkgnd() : CLGraphNode()
	{}

	GraphNodeBkgnd( std::string node_name )
				: CLGraphNode(node_name, "BackgroundSubtraction")
	{}

	~GraphNodeBkgnd()
	{}
	

	
	int thread_init(){ return 0;};
	int thread_deinit(){return 0;};
	//This function is typically called by CLGraphMT children, which gives a list of edges
	//this node need to connect to
	//also, this node assumes that the format, e.g. frame height, of the in_edges's CLInterface
	//have been set and just to check to make sure it is corresponding
	//but this function needs to set the formats of all its out_edges
	int init();

	/// uses vpInEdges_ and vpOutEdges_ specified
	/// This function is only called by the GraphExecuter
	int run();

private:
	IBGS *bgs = new MultiLayerBGS();
	PBAS pbas;
	BackgroundSubtractorSuBSENSE *pSubsense = new BackgroundSubtractorSuBSENSE();
  	bool firstTime = true;
	/*** Default Package ***/
	//bgs = new DPWrenGABGS; 
	//bgs = new DPTextureBGS; 
	//bgs = new MultiLayerBGS; 
	//bgs = new IndependentMultimodalBGS; 
	//bgs = new SuBSENSEBGS(); 
	//bgs = new LOBSTERBGS();
	/* Background Subtraction Methods */	
	cv::Ptr<cv::BackgroundSubtractor> pSubs;
	cv::Ptr<cv::BackgroundSubtractor> pMOG; //MOG Background subtractor
	cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
	cv::Mat subsResult;
	cv::Mat pbasResult;
	cv::Mat fgMaskMOG; //fg mask generated by MOG method
	cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	cv::Mat fgMaskBGS;
	cv::Mat img_bkgmodel;
};





//This function is typically called by CLGraphMT children, which gives a list of edges
//this node need to connect to
//also, this node assumes that the format, e.g. frame height, of the in_edges's CLInterface
//have been set and just to check to make sure it is corresponding
//but this function needs to set the formats of all its out_edges
int GraphNodeBkgnd::init()
{

	//makesure the graph is consistent with what this node needs

	//check size constraints on the number of edges
	if (vpInEdges_.size() != 1)
		return -1;
	if (vpOutEdges_.size() != 2)
		return -1;

	//now, check to see if the input Interface's formats are good
	for (UINT32 ui = 0 ; ui < vpInEdges_.size(); ++ui)
	{
		std::vector<CLInterface*>  vp_intf = vpInEdges_[ui]->buffer_;

		//format checks here if necessary
		for (UINT32 uj = 0; uj < vp_intf.size(); ++uj)
		{
			if (!vp_intf[uj]->bAllocated)
				return -3;
			if (vp_intf[uj]->v_images.size() != 1)
				return -4;
			if (vp_intf[uj]->v_images[0].cols != 320 || vp_intf[uj]->v_images[0].rows != 240 )
				return -5;
			if (vp_intf[uj]->v_images[0].depth() != CV_8U || vp_intf[uj]->v_images[0].channels() !=3)
				return -6;
		}
	}

	//now, set the output's Interface's formats
	for (UINT32 ui = 0 ; ui < vpOutEdges_.size(); ++ui)
	{
		std::vector<CLInterface*> vp_intf = vpOutEdges_[ui]->buffer_;

		//sets the formats
		for (UINT32 uj = 0; uj < vp_intf.size(); ++uj)
		{
			vp_intf[uj]->v_images.resize(1);
			vp_intf[uj]->v_images[0].create( 240, 320, CV_8UC3 );
			vp_intf[uj]->bAllocated = true;
		}
	}

	//Node specific initialization 
	pMOG = new cv::BackgroundSubtractorMOG(); //MOG approach
	pMOG2 = new cv::BackgroundSubtractorMOG2(-1, -1, false); //MOG2 approach

	bInitialized_ = true;
	return 0;

};

/// uses vpInEdges_ and vpOutEdges_ specified
/// This function is only called by the GraphExecuter
int GraphNodeBkgnd::run()
{
	//we can use zero because we made sure the # of input is 1 and
	//the # of outputs is also 1
	const CLInterface* in_interface = vpInEdges_[0]->getInterfaceRead();
	
	cv::Mat bluredImage;
	cv::GaussianBlur(in_interface->v_images[0], bluredImage, cv::Size(5,5), 2);
	
	//update the background model
    pMOG->operator()(bluredImage, fgMaskMOG, 0.008);
    //pMOG2->operator()(in_interface->v_images[0], fgMaskMOG2);
	/*
	
	if (firstTime) {
    	pSubsense->initialize(in_interface->v_images[0], cv::Mat (in_interface->v_images[0].size(), CV_8UC1, cv::Scalar_<uchar>(255)));
    	firstTime = false;
    }
	(*pSubsense)(bluredImage, subsResult);
	*/
	pbas.process(&bluredImage, &pbasResult);
	//bgs->process(bluredImage, fgMaskBGS, img_bkgmodel);	
	cv::medianBlur(fgMaskMOG, fgMaskMOG, 5);
	cv::medianBlur(pbasResult, pbasResult, 5);
	
	vpOutEdges_[0]->getInterfaceWrite()->v_images[0] = fgMaskMOG;
	vpOutEdges_[1]->getInterfaceWrite()->v_images[0] = pbasResult;
	n_counter_++;
	return 0;
};




#endif
